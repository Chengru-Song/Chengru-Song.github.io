<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-CN" /><updated>2022-07-01T00:39:59+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chengru’s Blog</title><subtitle>A personal blog website for sharing of technology, reflection and branding. 
</subtitle><author><name>Chengru Song</name></author><entry><title type="html">【博客】Threads</title><link href="http://localhost:4000/blog/2022/07/01/anxious-collection.html" rel="alternate" type="text/html" title="【博客】Threads" /><published>2022-07-01T00:27:58+08:00</published><updated>2022-07-01T00:27:58+08:00</updated><id>http://localhost:4000/blog/2022/07/01/anxious-collection</id><content type="html" xml:base="http://localhost:4000/blog/2022/07/01/anxious-collection.html"><![CDATA[<h1 id="threads">Threads</h1>
<p>之所以叫threads，是因为想把一些混乱的逻辑梳理一下，目前形式不太好，有很多非常焦虑的事情。先放三篇文章：
银行放贷问题：<a href="https://www.zhihu.com/question/537888391/answer/2546066628?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=545672028217225216&amp;utm_content=group1_Answer&amp;utm_campaign=shareopn">link</a>
<img src="/assets/images/2022-07-01-00-31-27.png" alt="Image" /></p>

<p>为什么房子断供的这么少？<a href="https://www.zhihu.com/question/498539515">link</a></p>

<p>原回答已经删除了，主要是讲了国内外对于房子的区别。国外房子放贷给群众，如果群众断供，那么房子被收回拍卖，不需要继续还放贷，因此这个风险其实在放贷一方也就是银行。但是国内是，放贷交不上，房子断供，房子被收走你还要继续还贷，金融风险转嫁，国家赢麻了。
<img src="/assets/images/2022-07-01-00-35-33.png" alt="Image" /></p>

<p>为什么年轻人想躺平？<a href="https://www.zhihu.com/question/475116887/answer/2135736238?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=545672028217225216&amp;utm_content=group3_Answer&amp;utm_campaign=shareopn">link</a></p>

<p>原因可能懂得都懂吧。资源被把持，普通人想拿到好的资源更难了，几乎不可能。
<img src="/assets/images/2022-07-01-00-38-58.png" alt="Image" /></p>]]></content><author><name>Chengru Song</name></author><category term="[&quot;Blog&quot;]" /><category term="301-life-blog" /><summary type="html"><![CDATA[Threads 之所以叫threads，是因为想把一些混乱的逻辑梳理一下，目前形式不太好，有很多非常焦虑的事情。先放三篇文章： 银行放贷问题：link 为什么房子断供的这么少？link 原回答已经删除了，主要是讲了国内外对于房子的区别。国外房子放贷给群众，如果群众断供，那么房子被收回拍卖，不需要继续还放贷，因此这个风险其实在放贷一方也就是银行。但是国内是，放贷交不上，房子断供，房子被收走你还要继续还贷，金融风险转嫁，国家赢麻了。 为什么年轻人想躺平？link 原因可能懂得都懂吧。资源被把持，普通人想拿到好的资源更难了，几乎不可能。]]></summary></entry><entry><title type="html">【博客】【复盘】2022/06 工作反思</title><link href="http://localhost:4000/blog/reflection/2022_jun/2022/06/27/nth-week-reflection.html" rel="alternate" type="text/html" title="【博客】【复盘】2022/06 工作反思" /><published>2022-06-27T10:23:14+08:00</published><updated>2022-06-27T10:23:14+08:00</updated><id>http://localhost:4000/blog/reflection/2022_jun/2022/06/27/nth-week-reflection</id><content type="html" xml:base="http://localhost:4000/blog/reflection/2022_jun/2022/06/27/nth-week-reflection.html"><![CDATA[<h1 id="工作反思">工作反思</h1>

<p>前两天和帝羲聊天，发现我的朋友们还有人关注这个博客的。停更的一个重要原因是，四月份的时候被公司的风控找到了，因为博客里面包含了公司的URL。实际上那个博客是想记录Makefile的一些常用写法，里面不涉及公司资产，只是有一行内网的地址忘了删除。后来风控告诉我要从所有的commits里面删除掉，导致我连删了两次repo。再后面我都不记得自己何时又重新上传了这个repo，且后面也无继续更新，我把后面的一些笔记都放到了notion里面，其实notion真挺好用的，我感觉可以开放notion的主页，当做自己的博客了。</p>

<p>最近对于工作的思考越来越多了，同时也和周围的很多朋友同事聊天，发现大家的反馈都差不多，在大部分希望事业还能继续发展的朋友和同事中，一些较为清醒的人有一个共识：找到一个可以提拔、欣赏你的leader，愿意给你好业务把你当成自己人培养，并真正给到好处，那么在事业上就能比较成功。通俗一点说：抱好大腿，吃香喝辣。否则将会过的较为悲惨，努力得再多，也只能是别人成功的垫脚石。</p>

<p>最为难受的是，现在的年轻人没有太多选择错误的空间。如果说在上个年代，选择错误还能够通过后期纠错走到一条正确的路上，只是稍微慢些，现在就会发现，那些优秀的人早就在一条快车道上飙车了，等你反应过来的时候，已经连别人的后脑勺都看不见了，横亘在你和那些后脑勺之间的，还是乌央乌央的一群人，那些人醒悟的比你早些，但同样已经很慢了。更惨的是没意识到危机的人，还在原来的路上慢慢悠悠晃，等到了死胡同的时候才发现拐弯已经来不及了。</p>

<p>举个例子，那些决心在科研道路上前行的人，例如清华的一些聪明人们，在大二的时候就开始进实验室，大三的时候决定在本校的已经把好的实验室推免名额都占上了，决定出国科研的已经拿了名校的offer，只剩下一些边角料的名额给其他985高校做推免。与此同时，他们在本科一般就有1-2篇paper上会，甚至还是顶会。是否有科研潜力也会在那个当下被人发掘，开始科研生涯。一个非常生动的例子是，我初中的一个竞赛生本科保送清华，进了清华的视觉实验室直博，在我研究生一年级，他博士三年级的时候，他Google Scholar的引用量就已经有1k+了，超过了很多高校的副教授甚至教授。但就算如此优秀，他也不能保证留在清华当老师。原因很简单很直白：上面的人没有下来，占住了位置，无关乎他们是否比这个新生代的小朋友更优秀，只在于他们把持着珍贵的资源。</p>

<p>同样，在工作中，那些准备进入职场的也就早早开始准备。研究生是学历的敲门砖，实际上在刚刚进实验室或者学校的研究生一年级，他们就开始在不同的地方实习了。他们产生了足够多的比较，以至于在真正快毕业时，基本上是以胜利者收割offer的姿态拿到了最头部的offer。其他人也只能拿边角料。</p>

<p>从这些思考中，我得到的take away是，在工作中，我必须把我能够想到的每一个细节做到完美，做到完美不能保证我就能得到我想要的东西，做到完美只能保证我少犯错，因为每个人都很完美，你只能保持一个高强度的状态，等待别人犯错，这时候才有你的机会。而这个等待的过程是漫长的，机会也都是转瞬即逝，也许还没有轮到我，我就已经谢幕了，希望我还能得到命运的眷顾，继续在这个社会上保持竞争力，保持清醒。保持清醒，保持清醒，保持清醒有何尝不是一种幸运呢。</p>]]></content><author><name>Chengru Song</name></author><category term="[&quot;Blog&quot;, &quot;Reflection&quot;, &quot;2022_Jun&quot;]" /><category term="301-work-blog" /><summary type="html"><![CDATA[工作反思 前两天和帝羲聊天，发现我的朋友们还有人关注这个博客的。停更的一个重要原因是，四月份的时候被公司的风控找到了，因为博客里面包含了公司的URL。实际上那个博客是想记录Makefile的一些常用写法，里面不涉及公司资产，只是有一行内网的地址忘了删除。后来风控告诉我要从所有的commits里面删除掉，导致我连删了两次repo。再后面我都不记得自己何时又重新上传了这个repo，且后面也无继续更新，我把后面的一些笔记都放到了notion里面，其实notion真挺好用的，我感觉可以开放notion的主页，当做自己的博客了。 最近对于工作的思考越来越多了，同时也和周围的很多朋友同事聊天，发现大家的反馈都差不多，在大部分希望事业还能继续发展的朋友和同事中，一些较为清醒的人有一个共识：找到一个可以提拔、欣赏你的leader，愿意给你好业务把你当成自己人培养，并真正给到好处，那么在事业上就能比较成功。通俗一点说：抱好大腿，吃香喝辣。否则将会过的较为悲惨，努力得再多，也只能是别人成功的垫脚石。 最为难受的是，现在的年轻人没有太多选择错误的空间。如果说在上个年代，选择错误还能够通过后期纠错走到一条正确的路上，只是稍微慢些，现在就会发现，那些优秀的人早就在一条快车道上飙车了，等你反应过来的时候，已经连别人的后脑勺都看不见了，横亘在你和那些后脑勺之间的，还是乌央乌央的一群人，那些人醒悟的比你早些，但同样已经很慢了。更惨的是没意识到危机的人，还在原来的路上慢慢悠悠晃，等到了死胡同的时候才发现拐弯已经来不及了。 举个例子，那些决心在科研道路上前行的人，例如清华的一些聪明人们，在大二的时候就开始进实验室，大三的时候决定在本校的已经把好的实验室推免名额都占上了，决定出国科研的已经拿了名校的offer，只剩下一些边角料的名额给其他985高校做推免。与此同时，他们在本科一般就有1-2篇paper上会，甚至还是顶会。是否有科研潜力也会在那个当下被人发掘，开始科研生涯。一个非常生动的例子是，我初中的一个竞赛生本科保送清华，进了清华的视觉实验室直博，在我研究生一年级，他博士三年级的时候，他Google Scholar的引用量就已经有1k+了，超过了很多高校的副教授甚至教授。但就算如此优秀，他也不能保证留在清华当老师。原因很简单很直白：上面的人没有下来，占住了位置，无关乎他们是否比这个新生代的小朋友更优秀，只在于他们把持着珍贵的资源。 同样，在工作中，那些准备进入职场的也就早早开始准备。研究生是学历的敲门砖，实际上在刚刚进实验室或者学校的研究生一年级，他们就开始在不同的地方实习了。他们产生了足够多的比较，以至于在真正快毕业时，基本上是以胜利者收割offer的姿态拿到了最头部的offer。其他人也只能拿边角料。 从这些思考中，我得到的take away是，在工作中，我必须把我能够想到的每一个细节做到完美，做到完美不能保证我就能得到我想要的东西，做到完美只能保证我少犯错，因为每个人都很完美，你只能保持一个高强度的状态，等待别人犯错，这时候才有你的机会。而这个等待的过程是漫长的，机会也都是转瞬即逝，也许还没有轮到我，我就已经谢幕了，希望我还能得到命运的眷顾，继续在这个社会上保持竞争力，保持清醒。保持清醒，保持清醒，保持清醒有何尝不是一种幸运呢。]]></summary></entry><entry><title type="html">【Basic】 Elastic Search</title><link href="http://localhost:4000/work/es/basics/2022/03/29/elastic-search.html" rel="alternate" type="text/html" title="【Basic】 Elastic Search" /><published>2022-03-29T12:40:40+08:00</published><updated>2022-03-29T12:40:40+08:00</updated><id>http://localhost:4000/work/es/basics/2022/03/29/elastic-search</id><content type="html" xml:base="http://localhost:4000/work/es/basics/2022/03/29/elastic-search.html"><![CDATA[]]></content><author><name>Chengru Song</name></author><category term="[&quot;work&quot;, &quot;es&quot;, &quot;basics&quot;]" /><category term="301-work-blog" /><category term="301-work-learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">【Basic】推荐系统review</title><link href="http://localhost:4000/work/ai/ai_basics/2022/03/22/recommender-system.html" rel="alternate" type="text/html" title="【Basic】推荐系统review" /><published>2022-03-22T11:40:40+08:00</published><updated>2022-03-22T11:40:40+08:00</updated><id>http://localhost:4000/work/ai/ai_basics/2022/03/22/recommender-system</id><content type="html" xml:base="http://localhost:4000/work/ai/ai_basics/2022/03/22/recommender-system.html"><![CDATA[<h1 id="广告召回">广告召回</h1>

<p>协同过滤，广告召回的重点内容，</p>]]></content><author><name>Chengru Song</name></author><category term="[&quot;work&quot;, &quot;AI&quot;, &quot;AI_Basics&quot;]" /><category term="301-work-blog" /><category term="301-work-learning" /><category term="301-work-recommend" /><summary type="html"><![CDATA[广告召回 协同过滤，广告召回的重点内容，]]></summary></entry><entry><title type="html">【博客】【复盘】2022/3/6 - 2022/3/11工作反思</title><link href="http://localhost:4000/blog/reflection/2022_mar/2022/03/12/four-week-reflection.html" rel="alternate" type="text/html" title="【博客】【复盘】2022/3/6 - 2022/3/11工作反思" /><published>2022-03-12T11:23:14+08:00</published><updated>2022-03-12T11:23:14+08:00</updated><id>http://localhost:4000/blog/reflection/2022_mar/2022/03/12/four-week-reflection</id><content type="html" xml:base="http://localhost:4000/blog/reflection/2022_mar/2022/03/12/four-week-reflection.html"><![CDATA[<h1 id="整体回顾">整体回顾</h1>

<p>这周感觉效率比较低下，目标感不是非常强烈，特别长期的目标是缺失的，短期的目标其实比较明确，就是把当前经手的一些事情搞好。没有一些更长期的明确目标其实非常容易变懒，有一种非常徒劳的紧迫感。但是长期目标如何设定，感觉可以找一个<strong>也有类似想法的人</strong>，这样我感觉能够大家一起努力，互相监督。这个方向最好能够细分一点，比方说都是研发，别的领域context比较少。很难有个比较统一的规划，做事方法可能也都不太相同。</p>

<h2 id="上次工作计划">上次工作计划</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />新人串讲
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />框架完成</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />详细填充当前部分</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />其他部分了解程度到80%</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />数据分析
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />分析过程，end-to-end</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />分析数据源</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />分析metrics</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />服务升级
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />daily todo</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />注意任务分配</li>
    </ul>
  </li>
</ul>

<h2 id="下周工作安排">下周工作安排</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />新人串讲
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />框架完成</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />首先完成自己相关部分</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />模型相关
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />如何做实验？</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />怎么产出一份详细的分析报告？</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />如何论证效果？</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />服务相关
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />写好测试</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />函数相关细节</li>
    </ul>
  </li>
</ul>]]></content><author><name>Chengru Song</name></author><category term="[&quot;Blog&quot;, &quot;Reflection&quot;, &quot;2022_Mar&quot;]" /><category term="301-work-blog" /><summary type="html"><![CDATA[整体回顾 这周感觉效率比较低下，目标感不是非常强烈，特别长期的目标是缺失的，短期的目标其实比较明确，就是把当前经手的一些事情搞好。没有一些更长期的明确目标其实非常容易变懒，有一种非常徒劳的紧迫感。但是长期目标如何设定，感觉可以找一个也有类似想法的人，这样我感觉能够大家一起努力，互相监督。这个方向最好能够细分一点，比方说都是研发，别的领域context比较少。很难有个比较统一的规划，做事方法可能也都不太相同。 上次工作计划 新人串讲 框架完成 详细填充当前部分 其他部分了解程度到80% 数据分析 分析过程，end-to-end 分析数据源 分析metrics 服务升级 daily todo 注意任务分配 下周工作安排 新人串讲 框架完成 首先完成自己相关部分 模型相关 如何做实验？ 怎么产出一份详细的分析报告？ 如何论证效果？ 服务相关 写好测试 函数相关细节]]></summary></entry><entry><title type="html">【博客】前Facebook PET分享感想</title><link href="http://localhost:4000/blog/2022/03/11/Aaron-sharding-thinking.html" rel="alternate" type="text/html" title="【博客】前Facebook PET分享感想" /><published>2022-03-11T11:23:14+08:00</published><updated>2022-03-11T11:23:14+08:00</updated><id>http://localhost:4000/blog/2022/03/11/Aaron-sharding-thinking</id><content type="html" xml:base="http://localhost:4000/blog/2022/03/11/Aaron-sharding-thinking.html"><![CDATA[<h1 id="听facebook前engineer分享的感想">听Facebook前Engineer分享的感想</h1>

<h2 id="走在前面">走在前面</h2>

<p>在预见到一些情况可能出现的时候，很多人会想在非常前面，大概比这个事情真正会发生的时间早上1-2年。所以他们很早就开始出解决方案，这个方案对于我们来说可能是抄的，觉得好像他们一下子就出了一个非常成熟的方案，但实际上内部的人，<strong>在空闲时间</strong>想了非常多的解决方案。例如signal loss这个东西，早在两年前苹果开始又这个迹象要限制的时候，他们就已经在想一些可能的解决方案了。内部非常卷，实验了很多方法，最后才定下来PET的方案，最开始甚至还做过类似于拟合缺失信息的方案，所以看来任何一个东西都不是一蹴而就的，而是内部实验了很多东西并且验证可行性才搞出来的。他提到了engineering文化，大概就是技术人员会想更多，虽然我们可能没有这种文化，但是应该让自己保持警惕。</p>

<h2 id="关于研究">关于研究</h2>

<p>聊天的时候发现有一个做了很久差分隐私的博士在会议里，以前也是在Facebook给为公司产出有隐私保护情况下的解决方案的。很显然，差分隐私根据我自己的knowledge来说更多是一个数学背景很强的问题，所以必然需要更加高级的人来产出这种问题的解决方案。看来做一个方向和不做一个方向在信息缺失的情况下就非常难以判断，我以为安全问题很难为公司带来产出，但是没想到这个竟然是能解决公司痛点的一个专业方向，并且FB和Google竟然还为此展开了军备竞赛，这真的让我难以想象。安全研究，区块链，到底哪些东西才是未来的出路，现在还是需要仔细思考，不断获取到更多的信息，和更多的人聊天。</p>

<h2 id="后续动作">后续动作</h2>

<p>大哥好像希望搞一个proposal在内部寻求一些机会，赶紧加入他，感觉是个非常大佬。不过他的这些概念和理念在字节还没有被验证，还要先看他的proposal能不能通过。我们自己有的优势点在于安全上面的一些研究，可以通过这些证明自己的能力。</p>]]></content><author><name>Chengru Song</name></author><category term="[&quot;Blog&quot;]" /><category term="301-work-blog" /><summary type="html"><![CDATA[听Facebook前Engineer分享的感想 走在前面 在预见到一些情况可能出现的时候，很多人会想在非常前面，大概比这个事情真正会发生的时间早上1-2年。所以他们很早就开始出解决方案，这个方案对于我们来说可能是抄的，觉得好像他们一下子就出了一个非常成熟的方案，但实际上内部的人，在空闲时间想了非常多的解决方案。例如signal loss这个东西，早在两年前苹果开始又这个迹象要限制的时候，他们就已经在想一些可能的解决方案了。内部非常卷，实验了很多方法，最后才定下来PET的方案，最开始甚至还做过类似于拟合缺失信息的方案，所以看来任何一个东西都不是一蹴而就的，而是内部实验了很多东西并且验证可行性才搞出来的。他提到了engineering文化，大概就是技术人员会想更多，虽然我们可能没有这种文化，但是应该让自己保持警惕。 关于研究 聊天的时候发现有一个做了很久差分隐私的博士在会议里，以前也是在Facebook给为公司产出有隐私保护情况下的解决方案的。很显然，差分隐私根据我自己的knowledge来说更多是一个数学背景很强的问题，所以必然需要更加高级的人来产出这种问题的解决方案。看来做一个方向和不做一个方向在信息缺失的情况下就非常难以判断，我以为安全问题很难为公司带来产出，但是没想到这个竟然是能解决公司痛点的一个专业方向，并且FB和Google竟然还为此展开了军备竞赛，这真的让我难以想象。安全研究，区块链，到底哪些东西才是未来的出路，现在还是需要仔细思考，不断获取到更多的信息，和更多的人聊天。 后续动作 大哥好像希望搞一个proposal在内部寻求一些机会，赶紧加入他，感觉是个非常大佬。不过他的这些概念和理念在字节还没有被验证，还要先看他的proposal能不能通过。我们自己有的优势点在于安全上面的一些研究，可以通过这些证明自己的能力。]]></summary></entry><entry><title type="html">【Basic】 Makefile Basics</title><link href="http://localhost:4000/work/golang/2022/03/08/makefile.html" rel="alternate" type="text/html" title="【Basic】 Makefile Basics" /><published>2022-03-08T12:40:40+08:00</published><updated>2022-03-08T12:40:40+08:00</updated><id>http://localhost:4000/work/golang/2022/03/08/makefile</id><content type="html" xml:base="http://localhost:4000/work/golang/2022/03/08/makefile.html"><![CDATA[<h1 id="example-makefile">Example Makefile</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.PHONY: generate update_submodule server rpc mock build run clean build_run

fetch:
	go get <span class="nt">-u</span> github.com/google/wire
	go get <span class="nt">-u</span> github.com/golang/mock/gomock
	go get <span class="nt">-u</span> github.com/smartystreets/goconvey/convey

generate: update_submodule server rpc mock

update_submodule:
ifeq <span class="o">(</span><span class="si">$(</span>wildcard idl/.<span class="k">*</span><span class="si">)</span>,<span class="o">)</span>
	git submodule init
endif
	git submodule update <span class="nt">--remote</span>

server:
	<span class="si">$(</span>idlgen<span class="si">)</span> <span class="nt">-module</span> <span class="si">$(</span>prefix<span class="si">)</span> <span class="nt">-service</span> <span class="si">$(</span>psm<span class="si">)</span> idl/video/kite_demo.thrift

rpc:
	<span class="si">$(</span>idlgen<span class="si">)</span> idl/content/arch/diting.thrift
	<span class="si">$(</span>idlgen<span class="si">)</span> idl/video/user_packer.thrift
	<span class="si">$(</span>idlgen<span class="si">)</span> idl/article/article_article.thrift
	<span class="si">$(</span>idlgen<span class="si">)</span> idl/video/favourite.thrift

mock:
	<span class="nb">rm</span> <span class="nt">-rf</span> mock/<span class="k">*</span>
	mockgen <span class="nt">-source</span><span class="o">=</span>dal/db/channel.go <span class="nt">-package</span><span class="o">=</span>dbmock <span class="nt">-destination</span><span class="o">=</span>mock/db/channel.go
	mockgen <span class="nt">-source</span><span class="o">=</span>dal/db/union_category.go <span class="nt">-package</span><span class="o">=</span>dbmock <span class="nt">-destination</span><span class="o">=</span>mock/db/union_category.go
	mockgen <span class="nt">-source</span><span class="o">=</span>dal/kv/redis_channel.go <span class="nt">-package</span><span class="o">=</span>kvmock <span class="nt">-destination</span><span class="o">=</span>mock/kv/redis_channel.go
	mockgen <span class="nt">-source</span><span class="o">=</span>dal/tcc/demotion.go <span class="nt">-package</span><span class="o">=</span>tccmock <span class="nt">-destination</span><span class="o">=</span>mock/tcc/demotion.go
	mockgen <span class="nt">-source</span><span class="o">=</span>dal/tcc/conf.go <span class="nt">-package</span><span class="o">=</span>tccmock <span class="nt">-destination</span><span class="o">=</span>mock/tcc/conf.go
	mockgen <span class="nt">-source</span><span class="o">=</span>kitex_gen/content/arch/diting/ditingservice/client.go <span class="nt">-package</span><span class="o">=</span>ditingmock <span class="nt">-destination</span><span class="o">=</span>mock/rpc/diting/client.go
	mockgen <span class="nt">-source</span><span class="o">=</span>kitex_gen/video/user_packer/videouserpackerservice/client.go <span class="nt">-package</span><span class="o">=</span>userpackermock <span class="nt">-destination</span><span class="o">=</span>mock/rpc/user_packer/client.go
	mockgen <span class="nt">-source</span><span class="o">=</span>kitex_gen/article_article/articlearticleservice/client.go <span class="nt">-package</span><span class="o">=</span>articlemock <span class="nt">-destination</span><span class="o">=</span>mock/rpc/article/client.go

<span class="nb">test</span>:
	<span class="c"># 测试覆盖率和竞态检查</span>
	go <span class="nb">test</span> <span class="nt">-v</span> <span class="nt">-count</span><span class="o">=</span>1 <span class="nt">-race</span> <span class="nt">-cover</span> <span class="nt">-covermode</span><span class="o">=</span>atomic <span class="nt">-failfast</span> <span class="nv">$$</span><span class="o">(</span>go list ./... | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'/kitex_gen\|/faas\|/cronjob\|/mock\|/idl'</span><span class="o">)</span>

<span class="c"># make build_run</span>
build_run: clean build run

build:
	./build.sh

run:
	./output/bootstrap.sh output

clean:
	<span class="nb">rm</span> <span class="nt">-rf</span> output
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.PHONY</code> at the beginning of file means that the command, for instance, <code class="language-plaintext highlighter-rouge">.PHONY: install</code>,</p>

<ul>
  <li>the word <code class="language-plaintext highlighter-rouge">install</code> doesn’t represent a file name in this Makefile</li>
  <li>the Makefile has nothing to do with a file called <code class="language-plaintext highlighter-rouge">install</code> in the same directory.</li>
</ul>]]></content><author><name>Chengru Song</name></author><category term="[&quot;work&quot;, &quot;golang&quot;]" /><category term="301-work-blog" /><category term="301-work-learning" /><summary type="html"><![CDATA[Example Makefile .PHONY: generate update_submodule server rpc mock build run clean build_run fetch: go get -u github.com/google/wire go get -u github.com/golang/mock/gomock go get -u github.com/smartystreets/goconvey/convey generate: update_submodule server rpc mock update_submodule: ifeq ($(wildcard idl/.*),) git submodule init endif git submodule update --remote server: $(idlgen) -module $(prefix) -service $(psm) idl/video/kite_demo.thrift rpc: $(idlgen) idl/content/arch/diting.thrift $(idlgen) idl/video/user_packer.thrift $(idlgen) idl/article/article_article.thrift $(idlgen) idl/video/favourite.thrift mock: rm -rf mock/* mockgen -source=dal/db/channel.go -package=dbmock -destination=mock/db/channel.go mockgen -source=dal/db/union_category.go -package=dbmock -destination=mock/db/union_category.go mockgen -source=dal/kv/redis_channel.go -package=kvmock -destination=mock/kv/redis_channel.go mockgen -source=dal/tcc/demotion.go -package=tccmock -destination=mock/tcc/demotion.go mockgen -source=dal/tcc/conf.go -package=tccmock -destination=mock/tcc/conf.go mockgen -source=kitex_gen/content/arch/diting/ditingservice/client.go -package=ditingmock -destination=mock/rpc/diting/client.go mockgen -source=kitex_gen/video/user_packer/videouserpackerservice/client.go -package=userpackermock -destination=mock/rpc/user_packer/client.go mockgen -source=kitex_gen/article_article/articlearticleservice/client.go -package=articlemock -destination=mock/rpc/article/client.go test: # 测试覆盖率和竞态检查 go test -v -count=1 -race -cover -covermode=atomic -failfast $$(go list ./... | grep -v '/kitex_gen\|/faas\|/cronjob\|/mock\|/idl') # make build_run build_run: clean build run build: ./build.sh run: ./output/bootstrap.sh output clean: rm -rf output .PHONY at the beginning of file means that the command, for instance, .PHONY: install, the word install doesn’t represent a file name in this Makefile the Makefile has nothing to do with a file called install in the same directory.]]></summary></entry><entry><title type="html">【Best Practice】 Golang Microservice Structure</title><link href="http://localhost:4000/work/golang/2022/03/07/golang-rpc-service-structure.html" rel="alternate" type="text/html" title="【Best Practice】 Golang Microservice Structure" /><published>2022-03-07T10:40:40+08:00</published><updated>2022-03-07T10:40:40+08:00</updated><id>http://localhost:4000/work/golang/2022/03/07/golang-rpc-service-structure</id><content type="html" xml:base="http://localhost:4000/work/golang/2022/03/07/golang-rpc-service-structure.html"><![CDATA[<h1 id="code-structure">Code Structure</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── Makefile          
├── README.md
├── app // 依赖注入
│   ├── container.go // 依赖注入容器
│   ├── wire.go      // wire 依赖声明
│   └── wire_gen.go  // wire 自动生成代码
├── build.sh         
├── conf // 项目配置               
│   ├── db.conf     // db配置
│   ├── db_boe.conf // boe db配置
│   └── kitex.yml   // server配置         
├── consts // 公用常量定义
│   ├── consts1.go // 以常量类型划分文件
│   └── consts2.go
├── dal // 数据访问层，所有外部数据依赖
│   ├── db // DB访问
│   │   ├── conn.go        // DB连接池
│   │   ├── table1.go      // 以表(或数据结构)的粒度划分文件
│   │   ├── table1_test.go // 对应DB访问单测
│   │   ├── table2.go
│   │   ├── table2_test.go
│   │   └── main_test.go   // 当前包单测的统一入口
│   ├── kv // kv访问，包括lc、redis、abase等
│   │   ├── main_test.go         // 当前包单测的统一入口
│   │   ├── abase_conn.go        // abase连接池
│   │   ├── redis_conn.go        // redis连接池
│   │   ├── redis_model1.go      // 以数据结构的粒度划分文件
│   │   └── redis_model1_test.go // 数据结构对应redis访问单测
│   ├── rpc // RPC访问
│   │   ├── article.go     // 以client粒度划分文件，每个文件实现各自client的构造方法
│   │   ├── params.go      // client构造的通用参数定义
│   │   └── user_packer.go
│   └── tcc // TCC配置访问
│       ├── conf.go     // 通用配置
│       └── demotion.go // 降级配置
├── go.mod
├── go.sum
├── handler.go
├── idl // 以submodule方式管理的公司统一idl库
├── kitex_gen // kitex生成代码
├── main.go
├── mock // go mock根据dal层interface生成代码
│   ├── db
│   │   ├── table1.go
│   │   └── table2.go
│   ├── kv
│   │   └── redis_model1.go
│   ├── rpc
│   │   ├── article
│   │   │   └── client.go
│   │   └── user_packer
│   │       └── client.go
│   └── tcc
│       ├── conf.go
│       └── demotion.go
├── model // 统一的model定义，包括db model、内部model等
├── operator // 数据操作层
│   ├── data
│   │   └── channel.go
│   ├── packer // 数据打包逻辑
│   │   ├── video_normal.go
│   │   └── video_parker.go
│   └── source // 数据loader，通过job manger实现
│       ├── article.go // article rpc的loader封装
│       ├── job_mgr.go // job mgr的定义及相关操作
│       ├── job_mgr_test.go
│       ├── source.go  // source常量及结果解析定义
│       └── user_packer.go
├── script // kitex自动生成脚本代码
├── service // 业务逻辑层
│   ├── business1 // 接口较多较复杂时，以业务模块划分二级目录
│   │   └── business.go
│   └── business2
│       ├── base.go        // 通用的业务处理逻辑
│       ├── create.go      // create业务逻辑
│       ├── create_test.go
│       ├── main_test.go
│       ├── mget.go
│       └── update.go
└── util // 通用工具，一般业务无关
    ├── convert.go // 以功能粒度划分文件，方便维护
    ├── convert_test.go
    ├── slice.go
    └── slice_test.go
</code></pre></div></div>

<h1 id="concept-overview">Concept Overview</h1>

<h2 id="app-dependency-injection">App Dependency Injection</h2>

<p>What is dependency injection? Could refer to this link for a detailed look. <a href="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=In%20software%20engineering%2C%20dependency%20injection,object%20is%20called%20a%20service.">Dependency Injection - Wiki</a>. The core idea behind <strong>dependency injection</strong> is to achieve seperation of concerns of construction and use of object.</p>

<p>This picture shows how it is achieved.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/1/10/W3sDesign_Dependency_Injection_Design_Pattern_UML.jpg" alt="img" /></p>

<p>There are several services that would be used by the client. It have to create the instances of other objects. With the help of <em>injector</em>, the client doesn’t initiates <code class="language-plaintext highlighter-rouge">service A</code> and <code class="language-plaintext highlighter-rouge">service B</code> directly. Instead, the <code class="language-plaintext highlighter-rouge">Injector</code> will do the favor for the client.</p>

<p>That’s exactly what <code class="language-plaintext highlighter-rouge">wire</code> is doing in golang. <code class="language-plaintext highlighter-rouge">wire</code> is an injector for golang. The package will deduct the relationship between each service components and initiates them for you. For each service that needs to be initiated, create a service <code class="language-plaintext highlighter-rouge">NewXXXService</code> in the corresponding directory.</p>

<p>It it worth noting that <code class="language-plaintext highlighter-rouge">wire</code> dependency injection framework <strong>doesn’t support initialize two identical object</strong>. Refer to <a href="https://github.com/google/wire/issues/206">Multipal bindings</a> for details.</p>

<h3 id="qa">Q&amp;A</h3>

<ol>
  <li>What should be initiated using dependency injection?
Anything that depends on others or provide service for others.</li>
  <li>What object should be initiated manually instead of using dependency injection?
Global database connections, global configurations, etc.</li>
  <li>What should I do when doing unit testing about non-dependency injection?
Initiate them every time when you writing unit testing files. Specify testing db connections.</li>
</ol>

<h2 id="makefile">Makefile</h2>

<p>A good makefile could release the labor in typing command lines endlessly. Refer to this file for details about makefile.</p>]]></content><author><name>Chengru Song</name></author><category term="[&quot;work&quot;, &quot;golang&quot;]" /><category term="301-work-blog" /><category term="301-work-learning" /><summary type="html"><![CDATA[Code Structure . ├── Makefile ├── README.md ├── app // 依赖注入 │ ├── container.go // 依赖注入容器 │ ├── wire.go // wire 依赖声明 │ └── wire_gen.go // wire 自动生成代码 ├── build.sh ├── conf // 项目配置 │ ├── db.conf // db配置 │ ├── db_boe.conf // boe db配置 │ └── kitex.yml // server配置 ├── consts // 公用常量定义 │ ├── consts1.go // 以常量类型划分文件 │ └── consts2.go ├── dal // 数据访问层，所有外部数据依赖 │ ├── db // DB访问 │ │ ├── conn.go // DB连接池 │ │ ├── table1.go // 以表(或数据结构)的粒度划分文件 │ │ ├── table1_test.go // 对应DB访问单测 │ │ ├── table2.go │ │ ├── table2_test.go │ │ └── main_test.go // 当前包单测的统一入口 │ ├── kv // kv访问，包括lc、redis、abase等 │ │ ├── main_test.go // 当前包单测的统一入口 │ │ ├── abase_conn.go // abase连接池 │ │ ├── redis_conn.go // redis连接池 │ │ ├── redis_model1.go // 以数据结构的粒度划分文件 │ │ └── redis_model1_test.go // 数据结构对应redis访问单测 │ ├── rpc // RPC访问 │ │ ├── article.go // 以client粒度划分文件，每个文件实现各自client的构造方法 │ │ ├── params.go // client构造的通用参数定义 │ │ └── user_packer.go │ └── tcc // TCC配置访问 │ ├── conf.go // 通用配置 │ └── demotion.go // 降级配置 ├── go.mod ├── go.sum ├── handler.go ├── idl // 以submodule方式管理的公司统一idl库 ├── kitex_gen // kitex生成代码 ├── main.go ├── mock // go mock根据dal层interface生成代码 │ ├── db │ │ ├── table1.go │ │ └── table2.go │ ├── kv │ │ └── redis_model1.go │ ├── rpc │ │ ├── article │ │ │ └── client.go │ │ └── user_packer │ │ └── client.go │ └── tcc │ ├── conf.go │ └── demotion.go ├── model // 统一的model定义，包括db model、内部model等 ├── operator // 数据操作层 │ ├── data │ │ └── channel.go │ ├── packer // 数据打包逻辑 │ │ ├── video_normal.go │ │ └── video_parker.go │ └── source // 数据loader，通过job manger实现 │ ├── article.go // article rpc的loader封装 │ ├── job_mgr.go // job mgr的定义及相关操作 │ ├── job_mgr_test.go │ ├── source.go // source常量及结果解析定义 │ └── user_packer.go ├── script // kitex自动生成脚本代码 ├── service // 业务逻辑层 │ ├── business1 // 接口较多较复杂时，以业务模块划分二级目录 │ │ └── business.go │ └── business2 │ ├── base.go // 通用的业务处理逻辑 │ ├── create.go // create业务逻辑 │ ├── create_test.go │ ├── main_test.go │ ├── mget.go │ └── update.go └── util // 通用工具，一般业务无关 ├── convert.go // 以功能粒度划分文件，方便维护 ├── convert_test.go ├── slice.go └── slice_test.go Concept Overview App Dependency Injection What is dependency injection? Could refer to this link for a detailed look. Dependency Injection - Wiki. The core idea behind dependency injection is to achieve seperation of concerns of construction and use of object. This picture shows how it is achieved. There are several services that would be used by the client. It have to create the instances of other objects. With the help of injector, the client doesn’t initiates service A and service B directly. Instead, the Injector will do the favor for the client. That’s exactly what wire is doing in golang. wire is an injector for golang. The package will deduct the relationship between each service components and initiates them for you. For each service that needs to be initiated, create a service NewXXXService in the corresponding directory. It it worth noting that wire dependency injection framework doesn’t support initialize two identical object. Refer to Multipal bindings for details. Q&amp;A What should be initiated using dependency injection? Anything that depends on others or provide service for others. What object should be initiated manually instead of using dependency injection? Global database connections, global configurations, etc. What should I do when doing unit testing about non-dependency injection? Initiate them every time when you writing unit testing files. Specify testing db connections. Makefile A good makefile could release the labor in typing command lines endlessly. Refer to this file for details about makefile.]]></summary></entry><entry><title type="html">【Knowledge】Deep Learning Argot</title><link href="http://localhost:4000/work/2022/03/02/deep-learing-argot.html" rel="alternate" type="text/html" title="【Knowledge】Deep Learning Argot" /><published>2022-03-02T12:45:31+08:00</published><updated>2022-03-02T12:45:31+08:00</updated><id>http://localhost:4000/work/2022/03/02/deep-learing-argot</id><content type="html" xml:base="http://localhost:4000/work/2022/03/02/deep-learing-argot.html"><![CDATA[<h1 id="argot-definition">Argot Definition</h1>

<table>
  <thead>
    <tr>
      <th>Argot</th>
      <th>Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Expressivity</td>
      <td>模型的表达能力用来衡量参数化模型如神经网络的可以拟合的函数的复杂程度。深度神经网络的表达能力随着它的深度指数上升， 这意味着中等规模的神经网络就拥有表达监督， 半监督， 强化学习任务的能力[2]。 深度神经网络可以<a href="https://arxiv.org/abs/1611.03530">记住非常大的数据集</a>就是一个很好的佐证。</td>
    </tr>
    <tr>
      <td>Generalization</td>
      <td>泛化能力，推广模型到不同的场景中的能力，表达能力增强，则能力下降。因为表达能力代表了当前场景下的对特定问题的表达程度。</td>
    </tr>
    <tr>
      <td>Regularization</td>
      <td>正则化，为了防止过拟合而引入在目标函数的公式中，这其中有\(L_1\), \(L_2\), \(L_0\)正则项，他们都分别为了解决不同的问题而在不同的情况下使用。</td>
    </tr>
    <tr>
      <td>Deep &amp; Shallow Model</td>
      <td>针对不同的机器学习方法，使用了CNN，DNN的是Deep model，使用了传统的机器学习方法，例如各种回归，一般来说都是shallow model。</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Chengru Song</name></author><category term="[&quot;work&quot;]" /><category term="301-work-blog" /><category term="301-work-learning" /><summary type="html"><![CDATA[Argot Definition Argot Explanation Expressivity 模型的表达能力用来衡量参数化模型如神经网络的可以拟合的函数的复杂程度。深度神经网络的表达能力随着它的深度指数上升， 这意味着中等规模的神经网络就拥有表达监督， 半监督， 强化学习任务的能力[2]。 深度神经网络可以记住非常大的数据集就是一个很好的佐证。 Generalization 泛化能力，推广模型到不同的场景中的能力，表达能力增强，则能力下降。因为表达能力代表了当前场景下的对特定问题的表达程度。 Regularization 正则化，为了防止过拟合而引入在目标函数的公式中，这其中有\(L_1\), \(L_2\), \(L_0\)正则项，他们都分别为了解决不同的问题而在不同的情况下使用。 Deep &amp; Shallow Model 针对不同的机器学习方法，使用了CNN，DNN的是Deep model，使用了传统的机器学习方法，例如各种回归，一般来说都是shallow model。]]></summary></entry><entry><title type="html">【博客】【复盘】2022/2/28 - 2022/3/4工作反思</title><link href="http://localhost:4000/blog/reflection/2022_mar/2022/03/02/three-week-reflection.html" rel="alternate" type="text/html" title="【博客】【复盘】2022/2/28 - 2022/3/4工作反思" /><published>2022-03-02T11:23:14+08:00</published><updated>2022-03-02T11:23:14+08:00</updated><id>http://localhost:4000/blog/reflection/2022_mar/2022/03/02/three-week-reflection</id><content type="html" xml:base="http://localhost:4000/blog/reflection/2022_mar/2022/03/02/three-week-reflection.html"><![CDATA[<h1 id="整体回顾">整体回顾</h1>

<h2 id="反思总结">反思总结</h2>

<p>当前有一个非常深刻的感想，当汇报一个东西的时候，要尽可能的让更多的人支持你，包括明面上支持你的和那些隐形的支持者。对于这两种支持者，很重要的事情就是<strong>让他们看到你要汇报的内容</strong>，不然如果在你真正汇报的时候呈现出的内容让人大吃一惊，那么原本的支持者的态度也会变得模棱两可。</p>]]></content><author><name>Chengru Song</name></author><category term="[&quot;Blog&quot;, &quot;Reflection&quot;, &quot;2022_Mar&quot;]" /><category term="301-work-blog" /><summary type="html"><![CDATA[整体回顾 反思总结 当前有一个非常深刻的感想，当汇报一个东西的时候，要尽可能的让更多的人支持你，包括明面上支持你的和那些隐形的支持者。对于这两种支持者，很重要的事情就是让他们看到你要汇报的内容，不然如果在你真正汇报的时候呈现出的内容让人大吃一惊，那么原本的支持者的态度也会变得模棱两可。]]></summary></entry></feed>